import React, { useEffect, useMemo } from 'react';
import { useAppDispatch, useAppSelector } from '../app/hooks';
import { loadPosts } from '../features/posts/postsSlice';
import { setQuery } from '../features/search/searchSlice';
import PostCard from '../components/PostCard/PostCard';
import SearchBar from '../components/SearchBar/SearchBar';
import PaginatedPosts from '../components/PaginatedPosts/PaginatedPosts';

import './HomePage.css';

const HomePage: React.FC = () => {
    const dispatch = useAppDispatch();
    const { items, status } = useAppSelector((state) => state.posts);
    const query = useAppSelector((state) => state.search.query);

    useEffect(() => {
        dispatch(loadPosts(query)); // –ó–∞–≥—Ä—É–∑–∞ –ø–æ—Å—Ç–æ–≤ —Å –ø–æ–∏—Å–∫–∞
    }, [dispatch, query]);

    // –†–∞–∑–¥–µ–ª–∫–∞ –ø–æ—Å—Ç–æ–≤ 1 –ª–æ–Ω–≥ –∏ 6 –º–∏–Ω–∏. –û—Å—Ç–∞–ª—å–Ω–æ–µ –≤ –ø–∞–Ω–≥–∏–Ω
    const [bigPost, smallPosts, remainingPosts] = useMemo(() => {
        if (items.length === 0) return [null, [], []];

        const shuffled = [...items];
        const randomIndex = Math.floor(Math.random() * shuffled.length);
        const largePost = shuffled.splice(randomIndex, 1)[0]; // –õ–æ–Ω–≥
        const small = shuffled.splice(0, 6); // 6 –º–∞–ª–µ–Ω—å–∫–∏—Ö
        return [largePost, small, shuffled]; // –ò–∑–ª–∏—à–∫–∏ –≤ –ø–∞–Ω–≥–∏–Ω
    }, [items]);

    return (
        <div className="homepage">
            {/*  –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
            <div className="homepage-info">
                <h1 className="one-title">–ë–ª–æ–≥</h1>
                <p className="txtP">
                    –ó–¥–µ—Å—å –º—ã –¥–µ–ª–∏–º—Å—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –∫–µ–π—Å–∞–º–∏ –∏–∑ –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, –ø–∏—à–µ–º –ø—Ä–æ IT,
                    –∞ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞—Ä—É–±–µ–∂–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
                </p>
            </div>

            {/*  –ü–æ–∏—Å–∫ */}
            <SearchBar
                value={query}
                onSearch={(q) => dispatch(setQuery(q))}

            />
            {/*  –†–æ–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ 400 –º—Å DEBAUNS */}

            {/* ‚ö† –°—Ç–∞—Ç—É—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏ */}
            {status === 'loading' && <p className="status">–ó–∞–≥—Ä—É–∑–∫–∞...</p>}
            {status === 'failed' && <p className="status">–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ</p>}

            {/* üîç –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ */}
            {status === 'succeeded' && items.length === 0 && (
                <div className="no-results">
                    <p className="no-results__text">üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É üòï</p>
                </div>
            )}


            {/*  –ü–æ—Å—Ç—ã */}
            {bigPost && (
                <div className="posts">
                    {/*–õ–æ–Ω–≥ –ø–æ—Å—Ç*/}
                    <div className="post-large">
                        <PostCard post={bigPost} fullWidth />
                    </div>

                    {/*  6 –º–∞–ª–µ–Ω—å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤ */}
                    <div className="post-grid">
                        {smallPosts.map((post) => (
                            <PostCard key={post.id} post={post} />
                        ))}
                    </div>

                    {/*–ü–∞–Ω–≥–∏–Ω –ø–æ—Å—Ç—ã*/}
                    <PaginatedPosts posts={remainingPosts} />
                </div>
            )}
        </div>
    );
};

export default HomePage;
